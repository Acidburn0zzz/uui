#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
# Run this script after your first boot with archlinux (as root)

#This script is used to active the automatic mode
source uuiscript

#VARIABLES {{{
# Desktop Environment
E17=0
GNOME=0
KDE=0
LXDE=0
OPENBOX=0
XFCE=0

# Package manager
APTGET=0
APTITUDE=0

# Main menu
BASICSETUP=0
DESKTOPENVIRONMENT=0
ACCESSORIES=0
DEVELOPMENT=0
OFFICE=0
SYSTEM=0
GRAPHICS=0
INTERNET=0
AUDIO=0
VIDEO=0
LAMP=0
GAMES=0
FONTS=0
FONTSCONFIG=0
CLEANPACKAGES=0

# Arch
ARCHI=`uname -m`

# Prompt
prompt1="Enter your option: "
prompt2="Enter nÂ° of options (ex: 1 2 3 or 1-3): "

# Colors
# Regular Colors
Black='\e[0;30m'        # Black
Blue='\e[0;34m'         # Blue
Cyan='\e[0;36m'         # Cyan
Green='\e[0;32m'        # Green
Purple='\e[0;35m'       # Purple
Red='\e[0;31m'          # Red
White='\e[0;37m'        # White
Yellow='\e[0;33m'       # Yellow
# Bold
BBlack='\e[1;30m'       # Black
BBlue='\e[1;34m'        # Blue
BCyan='\e[1;36m'        # Cyan
BGreen='\e[1;32m'       # Green
BPurple='\e[1;35m'      # Purple
BRed='\e[1;31m'         # Red
BWhite='\e[1;37m'       # White
BYellow='\e[1;33m'      # Yellow
#}}}

function read_input(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        OPTION=$1
    else
        read -p "$prompt1" OPTION
    fi
} #}}}
function read_input_text(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        OPTION=$2
    else
        read -p "$1 [y][N]: " OPTION
        echo ""
    fi
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
} #}}}
function read_input_options(){ #{{{
    local line
    local packages
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        array=("$1")
    else
        read -p "$prompt2" OPTION
        array=("$OPTION")
    fi
    for line in ${array[@]/,/ }; do
        if [[ ${line/-/} != $line ]]; then
            for ((i=${line%-*}; i<=${line#*-}; i++)); do
                packages+=($i);
            done
        else
            packages+=($line)
        fi
    done
    OPTIONS=("${packages[@]}")
} #}}}
function print_line(){ #{{{
    printf "%$(tput cols)s\n"|tr ' ' '-'
} #}}}
function print_title (){ #{{{
    clear
    print_line
    echo -e "# ${BWhite}$1${White}"
    print_line
    echo ""
} #}}}
function print_info (){ #{{{
    T_COLS=`tput cols`
    echo -e "${BWhite}$1${White}\n" | fold -sw $(( $T_COLS - 18 )) | sed 's/^/\t/'
} #}}}
function print_warning (){ #{{{
    echo -e "${BRed}$1${White}\n"
} #}}}
function check_package(){ #{{{
    for PACKAGE in $1; do
        dpkg -l $PACKAGE &> /dev/null && return 0;
    done
    return 1
} #}}}
function checkbox(){ #{{{
    [[ $1 -eq 1 ]] && echo -e "${BBlue}[${BWhite}X${BBlue}]${White}" || echo -e "${BBlue}[${White} ${BBlue}]${White}";
} #}}}
function checkbox_package(){ #{{{
    check_package "$1" && checkbox 1 || checkbox 0
} #}}}
function check_repository(){ #{{{
    if ls /etc/apt/sources.list.d/ | grep $1 &>/dev/null; then
        return 0
    else
        return 1
    fi
} #}}}
function package_install(){ #{{{
    FORCECHECK="n"
    for PACKAGE in $1; do
        if ! check_package "$PACKAGE" ; then
            if [[ $APTITUDE -eq 1 ]]; then
                su -l $USERNAME --command="sudo aptitude install -y $PACKAGE"
            else
                su -l $USERNAME --command="sudo apt-get install -y $PACKAGE"
            fi
        else
            echo -e "Warning: $PACKAGE is up to date --skipping"
        fi
    done
} #}}}
function package_remove(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
        apt-get remove --purge -y $1
    else
        apt-get remove --purge $1
    fi
} #}}}
function contains_element(){ #{{{
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
} #}}}
function create_xinitrc(){ #{{{
    echo -e ' #!/bin/sh\n
if [ -d /etc/X11/xinit/xinitrc.d ]; then
  for f in /etc/X11/xinit/xinitrc.d/*; do
    [ -x "$f" ] && . "$f"
  done
  unset f
fi\n' > /home/$USERNAME/.xinitrc
    echo -e "exec ck-launch-session $1" >> /home/$USERNAME/.xinitrc
    chown -R $USERNAME:users /home/$USERNAME/.xinitrc
} #}}}
function invalid_option(){ #{{{
    print_line
    echo "Invalid option. Try another one."
    pause_function
} #}}}
function pause_function(){ #{{{
    print_line
    if [[ $AUTOMATIC_MODE -ne 1 ]]; then
        read -e -sn 1 -p "Press any key to continue..."
    fi
} #}}}
function sumary(){ #{{{
    case $CURRENT_STATUS in
        1)
            print_line
            echo "$1 successful"
            ;;
        *)
            print_line
            echo "$1 not successful (Canceled)"
            ;;
    esac
} #}}}
function menu_item(){ #{{{
    [[ $# -lt 2 ]] && PACKAGE_NAME="$1" || PACKAGE_NAME="$2";
    CHARS_TO_REMOVE=("Ttf-" "-bzr" "-hg" "-svn" "-git" "-bin" "-stable" "Gnome-shell-theme-" "Gnome-shell-extension-");
    for CHARS in ${CHARS_TO_REMOVE[@]}; do PACKAGE_NAME=`echo ${PACKAGE_NAME^} | sed 's/'$CHARS'//'`; done
    echo -e "$(checkbox_package "$1") ${BWhite}$PACKAGE_NAME${White}"
} #}}}
function mainmenu_item(){ #{{{
    echo -e "$(checkbox "$1") ${BWhite}$2${White}"
} #}}}
function elihw() { #{{{
    [[ $OPT == b || $OPT == d ]] && break;
} #}}}

#WELCOME {{{
function welcome(){
    clear
    echo -e "${BWhite}Welcome to the Ubuntu Ultimate install script by helmuthdu${White}"
    print_line
    echo "Requirements:"
    echo "-> Ubuntu Distro"
    echo "-> Run script as root user"
    echo "-> Working internet connection"
    print_line
    echo "Script can be cancelled at any time with CTRL+C"
    print_line
    echo "it's highly recommended that you read this script before using it"
    echo "This version is still in ALPHA. Send bugreports to: "
    echo "http://www.github.com/helmuthdu/uui"
    pause_function
}
#}}}
#CHECK ROOT {{{
function check_root() {
    CURRENTUSER="$(whoami)"
    if [[ $CURRENTUSER != root ]]; then
        echo "Current user is NOT 'root'. EXIT now"
        pause_function
        exit 1
    fi
}
#}}}
#LANGUAGE SELECTOR {{{
function language_selector(){
    #DETECTS THE SYSTEM LANGUAGE {{{
    #automatically detects the system language based on your rc.conf
    LANGUAGE=`locale | grep LANGUAGE | sed 's/LANGUAGE=//' | sed 's/://'`
    #KDE #{{{
    if [ $LANGUAGE = "pt_BR" ]; then
        LANGUAGE_KDE="ptbr"
    elif [ $LANGUAGE = "en_GB" ] || [ $LANGUAGE = "en_US" ]; then
        LANGUAGE_KDE="engb"
    else
        LANGUAGE_KDE=`echo $LANGUAGE | cut -d\_ -f1`
    fi
    #}}}
    #FIREFOX #{{{
    LANGUAGE_FF=`echo $LANGUAGE | cut -d\_ -f1`
    #}}}
    #HUNSPELL #{{{
    LANGUAGE_HS=`echo $LANGUAGE | cut -d\_ -f1`
    #}}}
    #ASPELL #{{{
    LANGUAGE_AS=`echo $LANGUAGE | cut -d\_ -f1`
    #}}}
    #LIBREOFFICE #{{{
    LANGUAGE_LO=`echo $LANGUAGE | cut -d\_ -f1`
    #}}}
    #}}}
    print_title "LANGUAGE"
    read_input_text "Default system language: \"$LANGUAGE\"" $LANGSELECT
    case "$OPTION" in
        "n")
            read -p "New system language [ex: en_US]: " LANGUAGE
            #KDE #{{{
            if [ $LANGUAGE = "pt_BR" ]; then
                LANGUAGE_KDE="ptbr"
            elif [ $LANGUAGE = "en_GB" ] || [ $LANGUAGE = "en_US" ]; then
                LANGUAGE_KDE="engb"
            else
                LANGUAGE_KDE=`echo $LANGUAGE | cut -d\_ -f1`
            fi
            #}}}
            #FIREFOX #{{{
            LANGUAGE_FF=`echo $LANGUAGE | cut -d\_ -f1`
            #}}}
            #HUNSPELL #{{{
            LANGUAGE_HS=`echo $LANGUAGE | cut -d\_ -f1`
            #}}}
            #ASPELL #{{{
            LANGUAGE_AS=`echo $LANGUAGE | cut -d\_ -f1`
            #}}}
            #LIBREOFFICE #{{{
            LANGUAGE_LO=`echo $LANGUAGE | cut -d\_ -f1`
            #}}}
            ;;
        *)
            ;;
    esac
    pause_function
}
#}}}
#PACKAGE MANAGER {{{
function select_pkgmanager(){
    print_title "PACKAGE MANAGER"
    aurhelper=("apt-get" "aptitude")
    PS3="$prompt1"
    echo -e "Choose your default package manager\n"
    select OPT in "${aurhelper[@]}"; do
        case "$REPLY" in
            1)
                APTGET=1
                CURRENT_STATUS=1
                break
                ;;
            2)
                apt-get install aptitude
                CURRENT_STATUS=1
                APTITUDE=1
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
    sumary "AUR Helper installation"
    pause_function
}
#}}}
#CUSTOM REPOSITORIES {{{
function custom_repositories(){
    function repository_install(){
        echo -e "\n$1 repository added into sources.list.d direcotry"
        pause_function
    }
    print_title "CUSTOM REPOSITORIES"
    read_input_text "Add custom repositories" $CUSTOMREPO
    case "$OPTION" in
        "y")
            #CUSTOM REPOSITORIES {{{
            while [ 1 ]
            do
                print_title "CUSTOM REPOSITORIES"
                echo " 1) Elementary"
                echo " 2) Globus Preview"
                echo " 3) GNOME 3"
                echo " 4) Jdownloader"
                echo " 5) Medibuntu"
                echo " 6) Themes/Icons"
                echo " 7) Ubuntu-tweak"
                echo " 8) Webupd8"
                echo ""
                echo " a) \"Add Custom\""
                echo ""
                echo " d) DONE"
                echo ""
                CUSTOMREPO+=" d"
                read_input_options "$CUSTOMREPO"
                for OPT in ${OPTIONS[@]}; do
                    case $OPT in
                        1)
                            add-apt-repository -y ppa:elementary-os/daily
                            add-apt-repository -y ppa:nemequ/sqlheavy
                            repository_install "elementary"
                            ;;
                        2)
                            add-apt-repository -y ppa:gloobus-dev/gloobus-preview
                            repository_install "Gloobus Preview"
                            ;;
                        3)
                            add-apt-repository -y ppa:webupd8team/gnome3
                            repository_install "GNOME 3"
                            ;;
                        4)
                            add-apt-repository -y ppa:jd-team/jdownloader
                            repository_install "Jdownloader"
                            ;;
                        5)
                            wget --output-document=/etc/apt/sources.list.d/medibuntu.list http://www.medibuntu.org/sources.list.d/$(lsb_release -cs).list
                            apt-get update
                            apt-get --yes --quiet --allow-unauthenticated install medibuntu-keyring
                            apt-get update
                            repository_install "Medibuntu"
                            ;;
                        6)
                            add-apt-repository -y ppa:tiheum/equinox
                            add-apt-repository -y ppa:webupd8team/themes
                            repository_install "Themes & Icons"
                            ;;
                        7)
                            add-apt-repository -y ppa:ubuntu-tweak-testing/ppa
                            repository_install "Ubuntu-tweak"
                            ;;
                        8)
                            add-apt-repository -y ppa:nilarimogard/webupd8
                            repository_install "Webupd8"
                            ;;
                        "a")
                            read -p "Repository Name [ex: elementary-os]: " REPONAME
                            add-apt-repository -y ppa:$REPONAME
                            repository_install "$REPONAME"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            apt-get update
            CURRENT_STATUS=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Custom repositories configuration"
    pause_function
}
#}}}
#SYSTEM UPDATE {{{
function system_upgrade(){
    print_title "UPDATING YOUR SYSTEM"
	read -p "Update your system [y][n]: " OPTION
	if [ $OPTION = "y" ]; then
        apt-get update
        apt-get upgrade
    fi
}
#}}}
#SELECT USER {{{
function select_user(){
    create_new_user(){ #{{{
        read -p "Username: " USERNAME
        useradd -m -g users -G  adm,cdrom,sudo,dip,plugdev,lpadmin,sambashare -s /bin/bash $USERNAME
        passwd $USERNAME
        cp /etc/skel/.* /home/$USERNAME/
        #BASHRC {{{
            print_title "BASHRC"
            apt-get install -y git
            git clone git://github.com/helmuthdu/dotfiles
            cp dotfiles/.* ~
            cp dotfiles/.* /home/$USERNAME/
            rm -fr dotfiles
            print_title "DEFAULT EDITOR"
            EDITOR=("Nano" "Vim");
            PS3="$prompt1"
            echo -e "Choose default editor\n"
            select OPT in "${EDITOR[@]}"; do
                case "$REPLY" in
                    1)
                        sed -i '/EDITOR/s/vim/nano/' /home/$USERNAME/.bashrc
                        sed -i '/VISUAL/s/vim/nano/' /home/$USERNAME/.bashrc
                        sed -i '/EDITOR/s/vim/nano/' ~/.bashrc
                        sed -i '/VISUAL/s/vim/nano/' ~/.bashrc
                        break
                        ;;
                    2)
                        # VIM
                        apt-get install -y vim ctags ack
                        if ! check_package "discount" ; then
                            su -l $USERNAME --command="
                                wget http://aur.archlinux.org/packages/discount/discount.tar.gz;
                                tar zxvf discount.tar.gz;
                                cd discount;
                                makepkg -si --noconfirm;
                                cd ..;
                                rm -fr discount*
                            "
                        fi
                        # VIMRC
                        git clone git://github.com/helmuthdu/vim
                        mv vim /home/$USERNAME/.vim
                        ln -sf /home/$USERNAME/.vim/vimrc /home/$USERNAME/.vimrc
                        # PENTADACTYL [FIREFOX]
                        git clone git://github.com/helmuthdu/pentadactyl
                        mv pentadactyl /home/$USERNAME/.pentadactyl
                        ln -sf /home/$USERNAME/.pentadactyl/pentadactylrc /home/$USERNAME/.pentadactylrc
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
            chown -R $USERNAME:users /home/$USERNAME/.*
        #}}}
    } #}}}
    print_title "SELECT USER ACCOUNT"
    users=(`cat /etc/passwd | ls "/home" | sed 's/\///' | cut -d: -f1`);
    PS3="$prompt1"
    echo "Avaliable Users:"
    if [ $(( ${#users[@]} )) -gt 0 ]; then
        echo -e "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES\n"
    else
        echo ""
    fi
    select OPT in "${users[@]}" "Create new user"; do
        if [ "$OPT" == "Create new user" ]; then
            create_new_user
            break
        elif contains_element "$OPT" "${users[@]}"; then
            USERNAME=$OPT
            break
        else
            invalid_option
        fi
    done
}
#}}}
#BASIC SETUP{{{
function install_basic_setup(){
    print_title "(UN)COMPRESS TOOLS"
    apt-get install -y zip unzip unrar p7zip
    print_title "SSH"
    apt-get install -y openssh-server
}
#}}}
#VIDEO CARDS {{{
function install_video_cards(){
    print_title "VIDEO CARD"
    echo "Select your GPU:"
    echo " 1) ATI"
    echo " 2) nVidia"
    echo " 2) Virtualbox"
    echo ""
    echo " s) SKIP"
    echo ""
    read_input $VIDEOCARD
    case "$OPTION" in
        1)
            package_install "fglrx"
            CURRENT_STATUS=1
            sumary "ATI GPU driver installation"
            ;;
        2)
            package_install "nvidia-current"
            CURRENT_STATUS=1
            sumary "nVidia GPU driver installation"
            ;;
        3)
            package_install "virtualbox-guest-additions"
            gpasswd -a $USERNAME vboxsf
            CURRENT_STATUS=1
            sumary "Virtualbox guest additions (incl. video drivers) installation"
            ;;
        *)
            CURRENT_STATUS=0
            sumary "GPU drivers installation"
            ;;
    esac
    pause_function
}
#}}}
#GIT ACCESS THRU A FIREWALL {{{
function install_git_tor(){
    print_title "GIT-TOR"
    read_input_text "Ensuring access to GIT through a firewall (bypass college firewall)" $GITTOR
    case "$OPTION" in
        "y")
            package_install "netcat-openbsd vidalia privoxy git"
            if [ ! -f /usr/bin/proxy-wrapper ]; then
                echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
                echo -e '#!/bin/bash\nnc -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
                chmod +x /usr/bin/proxy-wrapper
                echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
                export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
                su -l $USERNAME --command="export GIT_PROXY_COMMAND=\"/usr/bin/proxy-wrapper\""
            fi
            CURRENT_STATUS=1
            ;;
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "GIT-TOR installation"
    pause_function
}
#}}}
#DESKTOP ENVIRONMENT {{{
function install_desktop_environment(){
    function install_icons() { #{{{
        while [[ 1 ]]
        do
            print_title "GNOME ICONS"
            echo " 1) $(menu_item "faenza-icon-theme" "Faenza")"
            echo " 2) $(menu_item "faenza-cupertino" "Faenza-Cupertino")"
            echo " 3) $(menu_item "faience-icon-theme" "Faience")"
            echo " 4) $(menu_item "elementary-icon-theme" "Elementary")"
            echo ""
            echo " b) BACK"
            echo ""
            GNOME_ICONS+=" b"
            read_input_options "$GNOME_ICONS"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        package_install "faenza-icon-theme"
                        ;;
                    2)
                        package_install "faenza-cupertino"
                        ;;
                    3)
                        package_install "faience-icon-theme"
                        ;;
                    4)
                        package_install "elementary-icon-theme"
                        ;;
                    "b")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
        elihw
        done
    } #}}}
    function install_themes() { #{{{
        if ! check_repository "webupd8team"; then
            add-apt-repository -y ppa:webupd8team/themes
            apt-get update
        fi
        if ! check_repository "elementary"; then
            add-apt-repository -y ppa:elementary-os/daily
            apt-get update
        fi
        while [[ 1 ]]
        do
            print_title "GTK2/GTK3 THEMES"
            echo " 1) $(menu_item "elementary-theme" "eGTK")"
            echo " 2) $(menu_item "holo-theme" "Holo")"
            echo " 3) $(menu_item "zukini-theme" "Zukini")"
            echo " 4) $(menu_item "zukitwo-gtk-theme" "Zukitwo")"
            echo ""
            echo " b) BACK"
            echo ""
            GTK_THEMES+=" b"
            read_input_options "$GTK_THEMES"
            for OPT in ${OPTIONS[@]}; do
                case "$OPT" in
                    1)
                        package_install "elementary-theme"
                        ;;
                    2)
                        package_install "holo-theme"
                        ;;
                    3)
                        package_install "zukini-theme"
                        ;;
                    4)
                        package_install "zukitwo-gtk-theme"
                        ;;
                    "b")
                        break
                        ;;
                    *)
                        invalid_option
                        ;;
                esac
            done
            elihw
        done
    } #}}}
    print_title "DESKTOP ENVIRONMENT"
    print_info "Desktop environments provide a complete graphical user interface (GUI) for a system by bundling together a variety of X clients written using a common widget toolkit and set of libraries."
    echo -e "Choose your desktop-environment:\n"
    echo " 1) Cinnamon"
    echo " 2) E17"
    echo " 3) GNOME"
    echo " 4) KDE"
    echo " 5) LXDE"
    echo " 6) OpenBox"
    echo " 7) XFCE"
    echo ""
    echo " b) BACK"
    read_input $DESKTOPENV
    case "$OPTION" in
        1)
            #CINNAMON {{{
            if ! check_repository "cinnamon"; then
                add-apt-repository -y ppa:gwendal-lebihan-dev/cinnamon-stable
                add-apt-repository -y ppa:bimsebasse/cinnamonextras
                apt-get update
            fi
            print_title "CINNAMON"
            print_info "Cinnamon is a fork of GNOME Shell, initially developed by Linux Mint. It attempts to provide a more traditional user environment based on the desktop metaphor, like GNOME 2. Cinnamon uses Muffin, a fork of the GNOME 3 window manager Mutter, as its window manager."
            package_install "cinnamon"
            create_xinitrc "gnome-session-cinnamon"
            #CINNAMON CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "CINNAMON CUSTOMIZATION"
                echo " 1) $(menu_item "cinnamon-applets")"
                echo " 2) $(menu_item "cinnamon-themes")"
                echo " 3) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons")"
                echo " 4) $(menu_item "zukini-theme gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes" "GTK2/GTK3 Themes")"
                echo " 5) $(menu_item "gnome-activity-journal")"
                echo " 6) $(menu_item "gloobus-sushi-bzr")"
                echo " 7) $(menu_item "gnome-packagekit")"
                echo ""
                echo " d) DONE"
                echo ""
                CINNAMON_OPTIONS+=" d"
                read_input_options "$CINNAMON_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "cinnamon-applets"
                            ;;
                        2)
                            package_install "cinnamon-themes"
                            ;;
                        3)
                            install_icons
                            OPT=1
                            ;;
                        4)
                            install_themes
                            OPT=2
                            ;;
                        5)
                            package_install "zeitgeist libzeitgeist python2-rdflib zeitgeist-datahub"
                            package_install "gnome-activity-journal"
                            ;;
                        6)
                            package_install "gloobus-sushi-bzr"
                            ;;
                        7)
                            package_install "gnome-packagekit gnome-settings-daemon-updates"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            GNOME=1
            ;;
            #}}}
        2)
            #E17 {{{
            print_title "E17 - http://wiki.archlinux.org/index.php/E17"
            print_info "Enlightenment, also known simply as E, is a stacking window manager for the X Window System which can be used alone or in conjunction with a desktop environment such as GNOME or KDE. Enlightenment is often used as a substitute for a full desktop environment."
            package_install "e17"
            chown -R $USERNAME:users /home/$USERNAME/.config
            create_xinitrc "enlightenment_start"
            #E17 CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "E17 CUSTOMIZATION"
                echo " 1) $(menu_item "e17-icons")"
                echo " 2) $(menu_item "e17-themes")"
                echo " 3) $(menu_item "elsa-svn-arch" "Elsa")"
                echo " 4) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "GNOME Icons")"
                echo " 5) $(menu_item "geeqie")"
                echo " 6) $(menu_item "gmrun")"
                echo " 7) $(menu_item "pcmanfm" "PCManFM")"
                echo " 8) $(menu_item "rxvt-unicode")"
                echo " 9) $(menu_item "scrot")"
                echo "10) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes")"
                echo "11) $(menu_item "thunar")"
                echo "12) $(menu_item "xfburn")"
                echo ""
                echo " d) DONE"
                echo ""
                E17_OPTIONS+=" d"
                read_input_options "$E17_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "e17-icons"
                            ;;
                        2)
                            package_install "e17-themes"
                            ;;
                        3)
                            package_install "elsa-svn-arch"
                            local elsa=`cat /etc/inittab | sed -n '/elsa/p'`
                            if [[ -z "$elsa" ]]; then
                                echo -e "x:5:respawn:/usr/sbin/elsa >& /dev/null" >> /etc/inittab
                            fi
                            ;;
                        4)
                            install_icons
                            OPT=2
                            ;;
                        5)
                            package_install "geeqie"
                            ;;
                        6)
                            package_install "gmrun"
                            ;;
                        7)
                            package_install "gksu gvfs pcmanfm"
                            ;;
                        8)
                            package_install "rxvt-unicode"
                            ;;
                        9)
                            package_install "scrot"
                            ;;
                        10)
                            install_themes
                            OPT=8
                            ;;
                        11)
                            package_install "polkit-gnome thunar tumbler"
                            package_install "gvfs-smb"
                            ;;
                        12)
                            package_install "xfburn"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            E17=1
            ;;
            #}}}
        3)
            #GNOME {{{
            print_title "GNOME"
            apt-get install -y gedit-plugins gnome-tweak-tool
            package_install "nautilus-image-converter nautilus-open-terminal nautilus-wallpaper"
            create_xinitrc "gnome-session"
            #GNOME CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "GNOME CUSTOMIZATION"
                echo " 1) $(menu_item "faenza-icon-theme faenza-cupertino faience-icon-theme elementary-icon-theme" "Gnome Icons")"
                echo " 2) $(menu_item "egtk-bzr orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes")"
                echo " 3) $(menu_item "gnome-shell-extensionss-gpaste gnome-shell-extensions-gtile gnome-shell-extensions-mediaplayer gnome-shell-extensions-noa11y gnome-shell-extensions-pomodoro gnome-shell-extensions-system-monitor gnome-shell-extensions-user-theme gnome-shell-extensions-weather" "GnomeShell Extensions")"
                echo " 4) $(menu_item "gnome-shell-theme-frieze gnome-shell-theme-elegance" "GnomeShell Themes")"
                echo " 5) $(menu_item "gnome-activity-journal")"
                echo " 6) $(menu_item "gloobus-preview")"
                echo " 7) $(menu_item "ubuntu-tweak")"
                echo ""
                echo " d) DONE"
                echo ""
                GNOME_OPTIONS+=" d"
                read_input_options "$GNOME_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            install_icons
                            OPT=1
                            ;;
                        2)
                            install_themes
                            OPT=2
                            ;;
                        3)
                            #GNOMESHELL EXTENSIONS {{{
                            while [[ 1 ]]
                            do
                                print_title "GNOMESHELL EXTENSIONS"
                                echo " 1) $(menu_item "gnome-shell-extensions-gpaste")"
                                echo " 2) $(menu_item "gnome-shell-extensions-mediaplayer")"
                                echo " 3) $(menu_item "gnome-shell-extensions-noa11y")"
                                echo " 4) $(menu_item "gnome-shell-extensions-pomodoro")"
                                echo " 5) $(menu_item "gnome-shell-extensions-system-monitor" "System-monitor")"
                                echo " 6) $(menu_item "gnome-shell-extensions-user-theme")"
                                echo " 7) $(menu_item "gnome-shell-extensions-weather")"
                                echo " 8) $(menu_item "gnome-shell-extensions-gtile")"
                                echo ""
                                echo " b) BACK"
                                echo ""
                                GNOME_EXTENSIONS+=" b"
                                read_input_options "$GNOME_EXTENSIONS"
                                for OPT in ${OPTIONS[@]}; do
                                    case "$OPT" in
                                        1)
                                            package_install "gnome-shell-extensions-gpaste"
                                            ;;
                                        2)
                                            package_install "gnome-shell-extensions-mediaplayer"
                                            ;;
                                        3)
                                            package_install "gnome-shell-extensions-noa11y"
                                            ;;
                                        4)
                                            package_install "gnome-shell-extensions-pomodoro"
                                            ;;
                                        5)
                                            package_install "gnome-shell-extensions-system-monitor"
                                            ;;
                                        6)
                                            package_install "gnome-shell-extensions-user-theme"
                                            ;;
                                        7)
                                            package_install "gnome-shell-extensions-weather"
                                            ;;
                                        8)
                                            package_install "gnome-shell-extensions-gtile"
                                            ;;
                                        "b")
                                            break
                                            ;;
                                        *)
                                            invalid_option
                                            ;;
                                    esac
                                done
                            elihw
                            done
                            #}}}
                            OPT=3
                            ;;
                        4)
                            #GNOMESHELL THEMES {{{
                            while [[ 1 ]]
                            do
                                print_title "GNOMESHELL THEMES"
                                echo " 1) $(menu_item "gnome-shell-theme-dark-shine")"
                                echo " 2) $(menu_item "gnome-shell-theme-elegance")"
                                echo " 3) $(menu_item "gnome-shell-theme-frieze")"
                                echo ""
                                echo " b) BACK"
                                echo ""
                                GNOME_SHELL_THEMES+=" b"
                                read_input_options "$GNOME_SHELL_THEMES"
                                for OPT in ${OPTIONS[@]}; do
                                    case "$OPT" in
                                        1)
                                            package_install "gnome-shell-theme-dark-shine"
                                            ;;
                                        2)
                                            package_install "gnome-shell-theme-elegance"
                                            ;;
                                        3)
                                            package_install "gnome-shell-theme-frieze"
                                            ;;
                                        "b")
                                            break
                                            ;;
                                        *)
                                            invalid_option
                                            ;;
                                    esac
                                done
                            elihw
                            done
                            #}}}
                            OPT=4
                            ;;
                        5)
                            package_install "gnome-activity-journal"
                            ;;
                        6)
                            if ! check_repository "gloobus-preview"; then
                                add-apt-repository -y ppa:gloobus-dev/gloobus-preview
                                apt-get update
                            fi
                            package_install "gloobus-preview gloobus-sushi unoconv"
                            ;;
                        7)
                            if ! check_repository "tualatrix"; then
                                add-apt-repository -y ppa:tualatrix/ppa
                                apt-get update
                            fi
                            package_install "ubuntu-tweak"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            GNOME=1
            ;;
            #}}}
        4)
            #KDE {{{
            print_title "KDE"
            print_info "KDE is an international free software community producing an integrated set of cross-platform applications designed to run on Linux, FreeBSD, Microsoft Windows, Solaris and Mac OS X systems. It is known for its Plasma Desktop, a desktop environment provided as the default working environment on many Linux distributions."
            package_install "kde kde-l10n-$LANGUAGE_KDE kipi-plugins"
            create_xinitrc "startkde"
            #QTCURVE THEMES #{{{
            wget http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
            wget http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
            tar zxvf 144205-Sweet.tar.gz
            tar zxvf 141920-Kawai.tar.gz
            rm 144205-Sweet.tar.gz
            rm 141920-Kawai.tar.gz
            mkdir -p /home/$USERNAME/.kde4/share/apps/color-schemes
            mv Sweet/Sweet.colors /home/$USERNAME/.kde4/share/apps/color-schemes
            mv Kawai/Kawai.colors /home/$USERNAME/.kde4/share/apps/color-schemes
            mkdir -p /home/$USERNAME/.kde4/share/apps/QtCurve
            mv Sweet/Sweet.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
            mv Kawai/Kawai.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
            chown -R $USERNAME:users /home/$USERNAME/.kde4
            rm -fr Kawai Sweet
            #}}}
            #KDE CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "KDE CUSTOMIZATION"
                echo " 1) $(menu_item "apper")"
                echo " 2) $(menu_item "bangarang")"
                echo " 3) $(menu_item "choqok")"
                echo " 4) $(menu_item "digikam")"
                echo " 5) $(menu_item "k3b")"
                echo " 6) $(menu_item "rosa-icons")"
                echo " 7) $(menu_item "caledonia-bundle plasma-theme-produkt" "Plasma Themes")"
                echo " 8) $(menu_item "yakuake")"
                echo ""
                echo " d) DONE"
                echo ""
                KDE_OPTIONS+=" d"
                read_input_options "$KDE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "apper"
                            ;;
                        2)
                            package_install "bangarang"
                            ;;
                        3)
                            package_install "choqok"
                            ;;
                        4)
                            package_install "digikam"
                            ;;
                        5)
                            package_install "k3b dvd+rw-tools"
                            ;;
                        6)
                            package_install "rosa-icons"
                            ;;
                        7)
                            package_install "caledonia-bundle plasma-theme-rosa plasma-theme-produkt ronak-plasmatheme"
                            ;;
                        8)
                            package_install "yakuake"
                            package_install "yakuake-skin-plasma-oxygen-panel"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            KDE=1
            ;;
            #}}}
        5)
            #LXDE {{{
            print_title "LXDE - http://wiki.archlinux.org/index.php/lxde"
            print_info "LXDE is a free and open source desktop environment for Unix and other POSIX compliant platforms, such as Linux or BSD. The goal of the project is to provide a desktop environment that is fast and energy efficient."
            package_install "lxde obconf consolekit"
            package_install "pm-utils upower"
            package_install "polkit-gnome gvfs gvfs-smb xdg-user-dirs"
            package_install "leafpad epdfview"
            package_install "xarchiver"
            package_install "gnome-defaults-list"
            create_xinitrc "startlxde"
            #LXDE CUSTOMIZATION{{{
            while [[ 1 ]]
            do
                print_title "LXDE CUSTOMIZATION"
                echo " 1) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons")"
                echo " 2) $(menu_item "lxdm" "LXDM")"
                echo " 3) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes")"
                echo " 4) $(menu_item "xfburn")"
                echo ""
                echo " d) DONE"
                echo ""
                LXDE_OPTIONS+=" d"
                read_input_options "$LXDE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            install_icons
                            OPT=1
                            ;;
                        2)
                            package_install "lxdm"
                            local lxdm=`cat /etc/inittab | sed -n '/lxdm/p'`
                            if [[ -z "$lxdm" ]]; then
                                echo -e "x:5:respawn:/usr/sbin/lxdm >& /dev/null" >> /etc/inittab
                            fi
                            ;;
                        3)
                            install_themes
                            OPT=3
                            ;;
                        4)
                            package_install "xfburn"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            LXDE=1
            ;;
            #}}}
        6)
            #OPENBOX {{{
            print_title "OPENBOX - http://wiki.archlinux.org/index.php/Openbox"
            print_info "Openbox is a lightweight and highly configurable window manager with extensive standards support."
            package_install "openbox obconf obmenu menumaker"
            package_install "lxappearance consolekit"
            package_install "xdg-user-dirs"
            package_install "leafpad epdfview nitrogen"
            package_install "xarchiver"
            package_install "gnome-defaults-list"
            mkdir -p /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/rc.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/menu.xml /home/$USERNAME/.config/openbox/
            cp /etc/xdg/openbox/autostart /home/$USERNAME/.config/openbox/
            chown -R $USERNAME:users /home/$USERNAME/.config
            create_xinitrc "openbox-session"
            #OPENBOX CUSTOMIZATION {{{
            while [[ 1 ]]
            do
                print_title "OPENBOX CUSTOMIZATION"
                echo " 1) $(menu_item "xcompmgr")"
                echo " 2) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons")"
                echo " 3) $(menu_item "geeqie")"
                echo " 4) $(menu_item "gmrun")"
                echo " 5) $(menu_item "pcmanfm" "PCManFM")"
                echo " 6) $(menu_item "rxvt-unicode")"
                echo " 7) $(menu_item "scrot")"
                echo " 8) $(menu_item "slim")"
                echo " 9) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes")"
                echo "10) $(menu_item "thunar")"
                echo "11) $(menu_item "tint2")"
                echo "12) $(menu_item "volwheel")"
                echo "13) $(menu_item "xfburn")"
                echo ""
                echo " d) DONE"
                echo ""
                OPENBOX_OPTIONS+=" d"
                read_input_options "$OPENBOX_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            package_install "xcompmgr transset-df"
                            ;;
                        2)
                            install_icons
                            OPT=2
                            ;;
                        3)
                            package_install "geeqie"
                            ;;
                        4)
                            package_install "gmrun"
                            ;;
                        5)
                            package_install "gksu gvfs pcmanfm"
                            ;;
                        6)
                            package_install "rxvt-unicode"
                            ;;
                        7)
                            package_install "scrot"
                            ;;
                        8)
                            package_install "slim"
                            ;;
                        9)
                            install_themes
                            OPT=9
                            ;;
                        10)
                            package_install "thunar tumbler"
                            package_install "gvfs-smb"
                            ;;
                        11)
                            package_install "tint2"
                            ;;
                        12)
                            package_install "volwheel"
                            ;;
                        13)
                            package_install "xfburn"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            OPENBOX=1
            ;;
            #}}}
        7)
            #XFCE {{{
            print_title "XFCE"
            print_info "Xfce is a free software desktop environment for Unix and Unix-like platforms, such as Linux, Solaris, and BSD. It aims to be fast and lightweight, while still being visually appealing and easy to use."
            package_install "xfce4 xfce4-goodies"
            create_xinitrc "startxfce4"
            #XFCE CUSTOMIZATION{{{
            while [[ 1 ]]
            do
                print_title "XFCE CUSTOMIZATION"
                echo " 1) $(menu_item "awoken-icons faenza-icon-theme faenza-cupertino-icon-theme faience-icon-theme elementary-icons" "Gnome Icons")"
                echo " 2) $(menu_item "gtk-theme-boomerang egtk-bzr light-themes orion-gtk-theme zukitwo-themes zukini-theme" "GTK Themes")"
                echo " 3) $(menu_item "slim")"
                echo ""
                echo " d) DONE"
                echo ""
                XFCE_OPTIONS+=" d"
                read_input_options "$XFCE_OPTIONS"
                for OPT in ${OPTIONS[@]}; do
                    case "$OPT" in
                        1)
                            install_icons
                            OPT=1
                            ;;
                        2)
                            install_themes
                            OPT=2
                            ;;
                        3)
                            package_install "slim"
                            ;;
                        "d")
                            break
                            ;;
                        *)
                            invalid_option
                            ;;
                    esac
                done
            elihw
            done
            #}}}
            CURRENT_STATUS=1
            XFCE=1
            ;;
            #}}}
        *)
            CURRENT_STATUS=0
            ;;
    esac
    sumary "Desktop Environment Installation"
    pause_function
}
#}}}
#ACCESSORIES {{{
function install_accessories_apps(){
while [[ 1 ]]
do
    print_title "ACCESSORIES APPS"
    echo " 1) $(menu_item "cairo-dock")"
    echo " 2) $(menu_item "conky-all" "Conky")"
    echo " 3) $(menu_item "dockbarx")"
    echo " 4) $(menu_item "docky")"
    echo " 5) $(menu_item "speedcrunch galculator" "$([[ $KDE -eq 1 ]] && echo "Speedcrunch" || echo "Galculator";)")"
    echo " 6) $(menu_item "gnome-pie")"
    echo " 7) $(menu_item "guake")"
    echo " 8) $(menu_item "kupfer")"
    echo " 9) $(menu_item "pyrenamer")"
    echo "10) $(menu_item "shutter")"
    echo "11) $(menu_item "synapse")"
    echo "12) $(menu_item "terminator")"
    echo "13) $(menu_item "zim")"
    echo ""
    echo " b) BACK"
    echo ""
    ACCESSORIES_OPTIONS+=" b"
    read_input_options "$ACCESSORIES_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "cairo-dock cairo-dock-plugins"
                ;;
            2)
                package_install "toilet figlet cowsay conky-all curl lm-sensors"
                sensors-detect
                ;;
            3)
                package_install "dockbarx"
                ;;
            4)
                package_install "docky"
                ;;
            5)
                if [[ $KDE -eq 1 ]]; then
                    package_install "speedcrunch"
                else
                    package_install "galculator"
                fi
                ;;
            6)
                package_install "gnome-pie"
                ;;
            7)
                package_install "guake"
                ;;
            8)
                package_install "kupfer"
                ;;
            9)
                package_install "pyrenamer"
                ;;
            10)
                package_install "shutter"
                ;;
            11)
                package_install "synapse"
                ;;
            12)
                package_install "terminator"
                ;;
            13)
                package_install "zim"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#DEVELOPEMENT {{{
function install_development_apps(){
while [[ 1 ]]
do
    print_title "DEVELOPMENT APPS"
    echo " 1) $(menu_item "aptana-studio")"
    echo " 2) $(menu_item "bluefish")"
    echo " 3) $(menu_item "eclipse")"
    echo " 4) $(menu_item "emacs")"
    echo " 5) $(menu_item "gvim")"
    echo " 6) $(menu_item "geany")"
    echo " 7) $(menu_item "netbeans")"
    echo " 8) $(menu_item "oracle-java7-installer" "Oracle Java")"
    echo " 9) $(menu_item "qtcreator")"
    echo "10) $(menu_item "sublime-text-2-beta" "Sublime Text 2")"
    echo "11) $(menu_item "gdb" "Debugger Tools")"
    echo "12) $(menu_item "mysql-workbench-gpl" "MySQL Workbench")"
    echo "13) $(menu_item "meld")"
    echo "14) $(menu_item "rabbitvcs" "RabbitVCS")"
    echo ""
    echo " b) BACK"
    echo ""
    DEVELOPMENT_OPTIONS+=" b"
    read_input_options "$DEVELOPMENT_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "libjpeg62 libwebkitgtk-1.0-0 git-core"
                if ! check_repository "java"; then
                    add-apt-repository -y ppa:webupd8team/java
                    apt-get update
                fi
                sudo apt-get install oracle-java7-installer
                wget https://d1iwq2e2xrohf.cloudfront.net/tools/studio/standalone/3.1.2.201205041324/linux/Aptana_Studio_3_Setup_Linux_x86_3.1.2.zip
                unzip Aptana_Studio_3_Setup_Linux_x86_3.1.2.zip -d /opt
                wget http://www.samclarke.com/wp-content/uploads/2012/04/AptanaStudio3.desktop
                mv AptanaStudio3.desktop /usr/share/applications/AptanaStudio3.desktop
                ;;
            2)
                package_install "bluefish"
                ;;
            3)
                package_install "eclipse"
                ;;
            4)
                package_install "emacs"
                ;;
            5)
                package_install "gvim"
                ;;
            6)
                package_install "geany"
                ;;
            7)
                package_install "netbeans"
                ;;
            8)
                package_remove "openjdk-7-jdk openjdk-7-jre"
                if ! check_repository "java"; then
                    add-apt-repository -y ppa:webupd8team/java
                    apt-get update
                fi
                sudo apt-get install oracle-java7-installer
                ;;
            9)
                package_install "qtcreator qt4-doc qt4-demos"
                mkdir -p /home/$USERNAME/.config/Nokia/qtcreator/styles
                wget http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
                mv monokai.xml /home/$USERNAME/.config/Nokia/qtcreator/styles/
                chown -R $USERNAME:users /home/$USERNAME/.config
                ;;
            10)
                if ! check_repository "sublime-text"; then
                    add-apt-repository -y ppa:webupd8team/sublime-text-2
                    apt-get update
                fi
                package_install "sublime-text-2-beta"
                ;;
            11)
                package_install "valgrind gdb splint tidy pyflakes"
                package_install "nodejs npm"
                sudo npm install -g jslint
                ;;
            12)
                #http://mysql.oss.eznetsols.org/Downloads/MySQLGUITools/
                if [[ $ARCHI == i686 ]]; then
                    wget http://mysql.oss.eznetsols.org/Downloads/MySQLGUITools/mysql-workbench-gpl-5.2.38-1ubu1104-i386.deb
                    dpkg -i mysql-workbench-gpl-5.2.40-1ubu1104-i386.deb
                    rm mysql-workbench-gpl-5.2.40-1ubu1104-i386.deb
                else
                    wget http://mysql.oss.eznetsols.org/Downloads/MySQLGUITools/mysql-workbench-gpl-5.2.40-1ubu1104-amd64.deb
                    dpkg -i mysql-workbench-gpl-5.2.40-1ubu1104-amd64.deb
                    rm mysql-workbench-gpl-5.2.40-1ubu1104-amd64.deb
                fi
                apt-get install -fy
                ;;
            13)
                package_install "meld"
                ;;
            14)
                if [[ $GNOME -eq 1 ]]; then
                    package_install "rabbitvcs-nautilus rabbitvcs-gedit"
                else
                    package_install "rabbitvcs-cli"
                fi
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#OFFICE {{{
function install_office_apps(){
while [[ 1 ]]
do
    print_title "OFFICE APPS"
    echo " 1) $(menu_item "libreoffice-common" "LibreOffice")"
    echo " 2) $(menu_item "goffice" "Abiword + Gnumeric")"
    echo " 3) $(menu_item "texlive-core" "latex")"
    echo " 4) $(menu_item "kchmviewer chmsee" "$([[ $KDE -eq 1 ]] && echo "Kchmviewer" || echo "Chmsee";)")"
    echo " 5) $(menu_item "gcstar")"
    echo " 6) $(menu_item "impressive")"
    echo " 7) $(menu_item "nitrotasks")"
    echo " 8) $(menu_item "ocrfeeder")"
    echo " 9) $(menu_item "xmind")"
    echo "10) $(menu_item "zathura")"
    echo ""
    echo " b) BACK"
    echo ""
    OFFICE_OPTIONS+=" b"
    read_input_options "$OFFICE_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                print_title "LIBREOFFICE"
                package_install "libreoffice libreoffice-l10n-$LANGUAGE_LO lo-menubar"
                package_install "hunspell-$LANGUAGE_HS"
                package_install "aspell-$LANGUAGE_AS"
                if [[ $KDE -eq 1 ]]; then
                    package_install "libreoffice-kde4"
                else
                    package_install "libreoffice-gnome"
                fi
                ;;
            2)
                package_install "gnumeric abiword abiword-plugins"
                package_install "hunspell-$LANGUAGE_HS"
                package_install "aspell-$LANGUAGE_AS"
                ;;
            3)
                print_title "LATEX"
                package_install "latex-beamer texlive texlive-latex-extra texlive-math-extra"
                package_install "texmaker"
                if [[ $LANGUAGE == pt_BR || $LANGUAGE == pt_PT ]]; then
                    package_install "abntex texlive-lang-portuguese"
                fi
                ;;
            4)
                if [[ $KDE -eq 1 ]]; then
                    package_install "kchmviewer"
                else
                    package_install "chmsee"
                fi
                ;;
            5)
                package_install "gcstar"
                ;;
            6)
                package_install "impressive"
                ;;
            7)
                if ! check_repository "nitrotasks"; then
                    add-apt-repository -y ppa:cooperjona/nitrotasks
                    apt-get update
                fi
                package_install "nitrotasks"
                ;;
            8)
                package_install "ocrfeeder tesseract-ocr gocr"
                package_install "aspell-$LANGUAGE_AS"
                ;;
            9)
                package_install "xmind"
                ;;
            10)
                package_install "zathura"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#SYSTEM TOOLS {{{
function install_system_apps(){
while [[ 1 ]]
do
    print_title "SYSTEM TOOLS APPS"
    echo " 1) $(menu_item "gparted")"
    echo " 2) $(menu_item "grsync")"
    echo " 3) $(menu_item "htop")"
    echo " 4) $(menu_item "virtualbox")"
    echo " 5) $(menu_item "wine")"
    echo ""
    echo " b) BACK"
    echo ""
    SYSTEMTOOLS_OPTIONS+=" b"
    read_input_options "$SYSTEMTOOLS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "gparted"
                ;;
            2)
                package_install "grsync"
                ;;
            3)
                package_install "htop"
                ;;
            4)
                package_install "virtualbox"
                groupadd vboxusers
                gpasswd -a $USERNAME vboxusers
                ;;
            5)
                package_install "wine wine-gecko winetricks"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#GRAPHICS {{{
function install_graphics_apps(){
while [[ 1 ]]
do
    print_title "GRAPHICS APPS"
    echo " 1) $(menu_item "blender")"
    echo " 2) $(menu_item "gimp")"
    echo " 3) $(menu_item "gimp-plugin-registry" "Gimp-plugins")"
    echo " 4) $(menu_item "gthumb")"
    echo " 5) $(menu_item "inkscape")"
    echo " 6) $(menu_item "mcomix")"
    echo " 7) $(menu_item "mypaint")"
    echo " 8) $(menu_item "shotwell")"
    echo ""
    echo " b) BACK"
    echo ""
    GRAPHICS_OPTIONS+=" b"
    read_input_options "$GRAPHICS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "blender"
                ;;
            2)
                if ! check_repository "gimp"; then
                    add-apt-repository -y ppa:otto-kesselgulasch/gimp
                    apt-get update
                fi
                package_install "gimp"
                ;;
            3)
                package_install "gimp-resynthesizer"
                ;;
            4)
                package_install "gthumb"
                ;;
            5)
                package_install "inkscape sozi"
                ;;
            6)
                package_install "mcomix"
                ;;
            7)
                package_install "mypaint"
                ;;
            8)
                package_install "shotwell"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#INTERNET {{{
function install_internet_apps(){
while [[ 1 ]]
do
    print_title "INTERNET APPS"
    echo " 1) $(menu_item "dropbox")"
    echo " 2) $(menu_item "chromium")"
    echo " 3) $(menu_item "google-earth")"
    echo " 4) $(menu_item "google-chrome")"
    echo " 5) $(menu_item "jdownloader")"
    echo " 6) $(menu_item "irssi")"
    echo " 7) $(menu_item "midori")"
    echo " 8) $(menu_item "firefox")"
    echo " 9) $(menu_item "thunderbird")"
    echo "10) $(menu_item "pidgin")"
    echo "11) $(menu_item "remmina")"
    echo "12) $(menu_item "skype")"
    echo "13) $(menu_item "teamspeak-client")"
    echo "14) $(menu_item "teamviewer")"
    echo "15) $(menu_item "transmission-qt transmission-gtk" "Trasmission")"
    echo "16) $(menu_item "konversation xchat" "$([[ $KDE -eq 1 ]] && echo "Konversation" || echo "X-Chat";)")"
    echo ""
    echo " b) BACK"
    echo ""
    INTERNET_OPTIONS+=" b"
    read_input_options "$INTERNET_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                if [[ $GNOME -eq 1 ]]; then
                    package_install "nautilus-dropbox"
                else
                    if [ "$ARCHI" = "i686" ]; then
                        su -l $USERNAME --command="cd ~ && wget -O - "http://www.dropbox.com/download?plat=lnx.x86" | tar xzf -"
                    else
                        su -l $USERNAME --command="cd ~ && wget -O - "http://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -"
                    fi
                    su -l $USERNAME --command="~/.dropbox-dist/dropboxd"
                fi
                ;;
            2)
                package_install "chromium flashplugin-installer"
                ;;
            3)
                http://dl.google.com/dl/earth/client/current/google-earth-stable_current_i386.deb
                dpkg -i google-earth-stable_current_i386.deb
                rm google-earth-stable_current_i386.deb
                apt-get install -fy
                ;;
            4)
                wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb
                dpkg -i google-chrome-stable_current_i386.deb
                rm google-chrome-stable_current_i386.deb
                apt-get install -fy
                package_install "flashplugin-installer"
                ;;
            5)
                if ! check_repository "jdownloader"; then
                    add-apt-repository -y ppa:jd-team/jdownloader
                    apt-get update
                fi
                package_install "jdownloader"
                ;;
            6)
                package_install "irssi"
                ;;
            7)
                package_install "midori"
                ;;
            8)
                package_install "firefox firefox-locale-$LANGUAGE_FF flashplugin-installer"
                ;;
            9)
                package_install "thunderbird thunderbird-locale-$LANGUAGE_FF"
                ;;
            10)
                package_install "pidgin"
                ;;
            11)
                package_install "remmina"
                ;;
            12)
                package_install "skype"
                ;;
            13)
                package_install "teamspeak-client"
                ;;
            14)
                wget http://www.teamviewer.com/download/teamviewer_linux.deb
                dpkg -i teamviewer_linux.deb
                rm teamviewer_linux.deb
                apt-get install -fy
                ;;
            15)
                if [[ $KDE -eq 1 ]]; then
                    package_install "transmission-qt"
                else
                    package_install "transmission-gtk"
                fi
                ;;
            16)
                if [[ $KDE -eq 1 ]]; then
                    package_install "konversation"
                else
                    package_install "xchat"
                fi
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#LAMP #{{{
function install_lamp(){
print_title "LAMP SERVER - APACHE, MYSQL & PHP + PHPMYADMIN"
read_input_text "Install LAMP" $LAMP
case "$OPTION" in
    "y")
		apt-get install -y tasksel
		tasksel install lamp-server
		apt-get install -y phpmyadmin
		a2enmod userdir
        CURRENT_STATUS=1
        ;;
    *)
        CURRENT_STATUS=0
        ;;
esac
sumary "LAMP installation"
pause_function
}
#}}}
#AUDIO {{{
function install_audio_apps(){
while [[ 1 ]]
do
    print_title "AUDIO APPS "
    echo " 1) $(menu_item "amarok")"
    echo " 2) $(menu_item "audacious")"
    echo " 3) $(menu_item "banshee")"
    echo " 4) $(menu_item "clementine")"
    echo " 5) $(menu_item "deadbeef")"
    echo " 6) $(menu_item "exaile")"
    echo " 7) $(menu_item "musique")"
    echo " 8) $(menu_item "nuvolaplayer")"
    echo " 9) $(menu_item "rhythmbox")"
    echo "10) $(menu_item "spotify")"
    echo "11) $(menu_item "soundconverter")"
    echo "12) $(menu_item "puddletag")"
    echo "13) $(menu_item "audacity")"
    echo "14) $(menu_item "timidity")"
    echo "15) $(menu_item "ubuntu-restricted-extras" "Codecs")"
    echo ""
    echo " b) BACK"
    echo ""
    AUDIO_OPTIONS+=" b"
    read_input_options "$AUDIO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "amarok"
                ;;
            2)
                package_install "audacious audacious-plugins"
                ;;
            3)
                package_install "banshee"
                ;;
            4)
                package_install "clementine"
                ;;
            5)
                package_install "deadbeef"
                ;;
            6)
                package_install "exaile"
                ;;
            7)
                package_install "musique"
                ;;
            8)
                if ! check_repository "novula"; then
                    add-apt-repository -y ppa:nuvola-player-builders/stable
                    apt-get update
                fi
                package_install "nuvolaplayer"
                ;;
            9)
                package_install "rhythmbox"
                ;;
            10)
                if ! check_repository "spotify"; then
                    echo "deb http://repository.spotify.com stable non-free" > /etc/apt/sources.list.d/spotify-stable.list
                    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4E9CFF4E
                    apt-get update
                fi
                package_install "spotify"
                ;;
            11)
                package_install "soundconverter"
                ;;
            12)
                package_install "puddletag"
                ;;
            13)
                package_install "audacity"
                ;;
            14)
                package_install "timidity fluid-soundfont-gs"
                ;;
            15)
                package_install "ubuntu-restricted-extras"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#VIDEO {{{
function install_video_apps(){
while [[ 1 ]]
do
    print_title "VIDEO APPS"
    echo " 1) $(menu_item "audience")"
    echo " 2) $(menu_item "gnome-mplayer")"
    echo " 3) $(menu_item "parole")"
    echo " 4) $(menu_item "minitube")"
    echo " 5) $(menu_item "miro")"
    echo " 6) $(menu_item "smplayer")"
    echo " 7) $(menu_item "vlc")"
    echo " 8) $(menu_item "xbmc")"
    echo " 9) $(menu_item "arista")"
    echo "10) $(menu_item "transmageddon")"
    echo "11) $(menu_item "kdenlive")"
    echo "12) $(menu_item "openshot")"
    echo "13) $(menu_item "pitivi")"
    echo "14) $(menu_item "kazam")"
    echo "15) $(menu_item "codecs codecs64" "Codecs")"
    echo ""
    echo " b) BACK"
    echo ""
    VIDEO_OPTIONS+=" b"
    read_input_options "$VIDEO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                if ! check_repository "audience"; then
                    sudo add-apt-repository -y ppa:elementary-os/testing
                    sudo add-apt-repository -y ppa:vala-team/ppa
                    sudo add-apt-repository -y ppa:audience-members/ppa
                    apt-get update
                fi
                package_install "audience"
                ;;
            2)
                package_install "gnome-mplayer"
                ;;
            3)
                package_install "parole"
                ;;
            4)
                package_install "minitube"
                ;;
            5)
                package_install "miro"
                ;;
            6)
                package_install "smplayer smplayer-themes"
                ;;
            7)
                package_install "vlc"
                ;;
            8)
                package_install "xbmc"
                ;;
            9)
                package_install "arista"
                ;;
            10)
                package_install "transmageddon"
                ;;
            11)
                package_install "kdenlive"
                ;;
            12)
                package_install "openshot"
                ;;
            13)
                package_install "pitivi"
                ;;
            14)
                package_install "kazam"
                ;;
            15)
                package_install "libdvdread4 libdvdnav4 libquicktime2 libdvdcss2 cdrdao"
                if [ "$ARCHI" = "i686" ]; then
                    package_install "w32codecs"
                else
                    package_install "w64codecs"
                fi
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#GAMES {{{
function install_games(){
while [[ 1 ]]
do
    print_title "GAMES"
    echo " 1) Action/Adventure"
    echo " 2) Arcade/Platformer"
    echo " 3) Dungeon"
    echo " 4) Emulators"
    echo " 5) FPS"
    echo " 6) MMO"
    echo " 7) Puzzle"
    echo " 8) RPG"
    echo " 9) Racing"
    echo "10) Simulation"
    echo "11) Strategy"
    echo ""
    echo " b) BACK"
    echo ""
    FUN+=" b"
    read_input_options "$FUN"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                #ACTION/ADVENTURE {{{
                while [[ 1 ]]
                do
                    print_title "ACTION AND ADVENTURE"
                    echo " 1) $(menu_item "astromenace")"
                    echo " 2) $(menu_item "opentyrian-hg")"
                    echo " 3) $(menu_item "mars-shooter" "M.A.R.S.")"
                    echo " 4) $(menu_item "yofrankie" "Yo Frankie!")"
                    echo " 5) $(menu_item "counter-strike-2d" "Counter-Strike 2D")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    ACTION+=" b"
                    read_input_options "$ACTION"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "astromenace"
                                ;;
                            2)
                                package_install "opentyrian-hg"
                                ;;
                            3)
                                package_install "mars-shooter"
                                ;;
                            4)
                                package_install "yofrankie"
                                ;;
                            5)
                                package_install "counter-strike-2d"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=1
                ;;
            2)
                #ARCADE/PLATFORMER {{{
                while [[ 1 ]]
                do
                    print_title "ARCADE AND PLATFORMER"
                    echo " 1) $(menu_item "opensonic")"
                    echo " 2) $(menu_item "frogatto")"
                    echo " 3) $(menu_item "bomberclone")"
                    echo " 4) $(menu_item "goonies")"
                    echo " 5) $(menu_item "mari0")"
                    echo " 6) $(menu_item "neverball")"
                    echo " 7) $(menu_item "smc" "Super Mario Chronicles")"
                    echo " 8) $(menu_item "xmoto")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    ARCADE+=" b"
                    read_input_options "$ARCADE"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "opensonic"
                                ;;
                            2)
                                package_install "frogatto"
                                ;;
                            3)
                                package_install "bomberclone"
                                ;;
                            4)
                                package_install "goonies"
                                ;;
                            5)
                                package_install "mari0"
                                ;;
                            6)
                                package_install "neverball"
                                ;;
                            7)
                                package_install "smc"
                                ;;
                            8)
                                package_install "xmoto"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=2
                ;;
            3)
                #DUNGEON {{{
                while [[ 1 ]]
                do
                    print_title "DUNGEON"
                    echo " 1) $(menu_item "adom")"
                    echo " 2) $(menu_item "tome4" "Tales of MajEyal")"
                    echo " 3) $(menu_item "lostlabyrinth" "Lost Labyrinth")"
                    echo " 4) $(menu_item "scourge" "S.C.O.U.R.G.E.")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    DUNGEON+=" b"
                    read_input_options "$DUNGEON"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "adom"
                                ;;
                            2)
                                package_install "tome4"
                                ;;
                            3)
                                package_install "lostlabyrinth"
                                ;;
                            4)
                                package_install "scourge"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=3
                ;;
            4)
                #EMULATORS {{{
                while [[ 1 ]]
                do
                    print_title "EMULATORS"
                    echo " 1) $(menu_item "bsnes" "BSNES")"
                    echo " 2) $(menu_item "desmume-svn")"
                    echo " 3) $(menu_item "dolphin-emu" "Dolphin")"
                    echo " 4) $(menu_item "epsxe")"
                    echo " 5) $(menu_item "project64")"
                    echo " 6) $(menu_item "vba-m-gtk-svn" "VisualBoyAdvanced")"
                    echo " 7) $(menu_item "wxmupen64plus-hg")"
                    echo " 8) $(menu_item "zsnes")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    EMULATORS+=" b"
                    read_input_options "$EMULATORS"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "bsnes"
                                ;;
                            2)
                                package_install "desmume-svn"
                                ;;
                            3)
                                package_install "dolphin-emu"
                                ;;
                            4)
                                package_install "epsxe"
                                ;;
                            5)
                                package_install "project64"
                                ;;
                            6)
                                package_install "vba-m-gtk-svn"
                                ;;
                            7)
                                package_install "wxmupen64plus-hg"
                                package_install "mupen64plus-video-rice-hg"
                                package_install "mupen64plus-audio-sdl-hg"
                                package_install "mupen64plus-input-sdl-hg"
                                package_install "mupen64plus-rsp-hle-hg"
                                ;;
                            8)
                                package_install "zsnes"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=4
                ;;
            5)
                #FPS {{{
                while [[ 1 ]]
                do
                    print_title "FPS"
                    echo " 1) $(menu_item "alienarena")"
                    echo " 2) $(menu_item "warsow")"
                    echo " 3) $(menu_item "enemy-territory" "Wolfenstein: Enemy Territory")"
                    echo " 4) $(menu_item "worldofpadman" "World of Padman")"
                    echo " 5) $(menu_item "xonotic")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    FPS+=" b"
                    read_input_options "$FPS"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "alienarena"
                                ;;
                            2)
                                package_install "warsow"
                                ;;
                            3)
                                package_install "enemy-territory"
                                ;;
                            4)
                                package_install "worldofpadman"
                                ;;
                            5)
                                package_install "xonotic"
                                ;;

                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=5
                ;;
            6)
                #MMO {{{
                while [[ 1 ]]
                do
                    print_title "MMO"
                    echo " 1) $(menu_item "hon" "Heroes of Newerth")"
                    echo " 2) $(menu_item "manaplus")"
                    echo " 3) $(menu_item "savage2")"
                    echo " 4) $(menu_item "spiral-knights")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    MMO+=" b"
                    read_input_options "$MMO"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "hon"
                                ;;
                            2)
                                package_install "manaplus"
                                ;;
                            3)
                                package_install "savage2"
                                ;;
                            4)
                                package_install "spiral-knights"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=6
                ;;
            7)
                #PUZZLE {{{
                while [[ 1 ]]
                do
                    print_title "PUZZLE"
                    echo " 1) $(menu_item "frozen-bubble")"
                    echo " 2) $(menu_item "numptyphysics-svn")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    PUZZLE+=" b"
                    read_input_options "$PUZZLE"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "frozen-bubble"
                                ;;
                            2)
                                package_install "numptyphysics-svn"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=7
                ;;
            8)
                #RPG {{{
                while [[ 1 ]]
                do
                    print_title "RPG"
                    echo " 1) $(menu_item "ardentryst")"
                    echo " 2) $(menu_item "flare-rpg")"
                    echo " 3) $(menu_item "freedroidrpg" "Freedroid RPG")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    RPG+=" b"
                    read_input_options "$RPG"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "ardentryst"
                                ;;
                            2)
                                package_install "flare-rpg"
                                ;;
                            3)
                                package_install "freedroidrpg"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=8
                ;;
            9)
                #RACING {{{
                while [[ 1 ]]
                do
                    print_title "RACING"
                    echo " 1) $(menu_item "maniadrive")"
                    echo " 2) $(menu_item "death-rally")"
                    echo " 3) $(menu_item "stuntrally")"
                    echo " 4) $(menu_item "supertuxkart")"
                    echo " 5) $(menu_item "speed-dreams")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    RACING+=" b"
                    read_input_options "$RACING"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "maniadrive"
                                ;;
                            2)
                                package_install "death-rally"
                                ;;
                            3)
                                package_install "stuntrally"
                                ;;
                            4)
                                package_install "supertuxkart"
                                ;;
                            5)
                                package_install "speed-dreams"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=9
                ;;
            10)
                #SIMULATION {{{
                while [[ 1 ]]
                do
                    print_title "SIMULATION"
                    echo " 1) $(menu_item "simutrans")"
                    echo " 2) $(menu_item "corsix-th" "Theme Hospital")"
                    echo " 3) $(menu_item "openttd")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    SIMULATION+=" b"
                    read_input_options "$SIMULATION"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "simutrans"
                                ;;
                            2)
                                package_install "corsix-th"
                                ;;
                            3)
                                package_install "openttd"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=10
                ;;
            11)
                #STRATEGY {{{
                while [[ 1 ]]
                do
                    print_title "STRATEGY"
                    echo " 1) $(menu_item "0ad")"
                    echo " 2) $(menu_item "hedgewars")"
                    echo " 3) $(menu_item "megaglest")"
                    echo " 4) $(menu_item "warzone2100")"
                    echo " 5) $(menu_item "wesnoth")"
                    echo " 6) $(menu_item "zod")"
                    echo ""
                    echo " b) BACK"
                    echo ""
                    STRATEGY+=" b"
                    read_input_options "$STRATEGY"
                    for OPT in ${OPTIONS[@]}; do
                        case "$OPT" in
                            1)
                                package_install "0ad"
                                ;;
                            2)
                                package_install "hedgewars"
                                ;;
                            3)
                                package_install "megaglest"
                                ;;
                            4)
                                package_install "warzone2100"
                                ;;
                            5)
                                package_install "wesnoth"
                                ;;
                            6)
                                package_install "commander-zod"
                                ;;
                            "b")
                                break
                                ;;
                            *)
                                invalid_option
                                ;;
                        esac
                    done
                elihw
                done
                #}}}
                OPT=11
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#FONTS {{{
function install_fonts(){
while [[ 1 ]]
do
    print_title "FONTS"
    echo " 1) $(menu_item "ttf-dejavu")"
    echo " 2) $(menu_item "ttf-google-webfonts")"
    echo " 3) $(menu_item "ttf-liberation")"
    echo " 4) $(menu_item "ttf-mscorefonts-installer")"
    echo ""
    echo " b) BACK"
    echo ""
    FONTS_OPTIONS+=" b"
    read_input_options "$FONTS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                package_install "ttf-dejavu"
                ;;
            2)
                echo -e "\nWARNING: Install time can be > 20min"
                read_input_text "Are you sure you want to continue?" $GOOGLE_FONTS
                if [[ $OPTION == n ]]; then continue; fi
                cd && wget http://webupd8.googlecode.com/files/install-google-fonts
                chmod +x install-google-fonts
                ./install-google-fonts
                ;;
            3)
                package_install "ttf-liberation"
                ;;
            4)
                package_install "ttf-mscorefonts-installer"
                ;;
            "b")
                break
                ;;
            *)
                invalid_option
                ;;
        esac
    done
elihw
done
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
    function clean_orphan_packages(){
    print_title "CLEAN ORPHAN PACKAGES"
    apt-get autoremove --purge -y
}
#}}}
#FINISH {{{
function finish(){
    print_title "INSTALL COMPLETED"
    echo "Thanks for using the Ubuntu Ultimate Install script by helmuthdu"
    exit 0
}
#}}}

#MAIN {{{
welcome
check_root
language_selector
system_upgrade
select_user
select_pkgmanager

while [[ 1 ]]
do
    print_title "UBUNTU ULTIMATE INSTALL - https://github.com/helmuthdu/uui"
    echo " 1) $(mainmenu_item $BASICSETUP "Basic Setup")"
    echo " 2) $(mainmenu_item $DESKTOPENVIRONMENT "Desktop Environment")"
    echo " 3) $(mainmenu_item $ACCESSORIES "Accessories Apps")"
    echo " 4) $(mainmenu_item $DEVELOPMENT "Development Apps")"
    echo " 5) $(mainmenu_item $OFFICE "Office Apps")"
    echo " 6) $(mainmenu_item $SYSTEM "System Apps")"
    echo " 7) $(mainmenu_item $GRAPHICS "Graphics Apps")"
    echo " 8) $(mainmenu_item $INTERNET "Internet Apps")"
    echo " 9) $(mainmenu_item $AUDIO "Audio Apps")"
    echo "10) $(mainmenu_item $VIDEO "Video Apps")"
    echo "11) $(mainmenu_item $GAMES "Games")"
    echo "12) $(mainmenu_item $LAMP "LAMP")"
    echo "13) $(mainmenu_item $FONTS "Fonts")"
    echo "14) $(mainmenu_item $CLEANPACKAGES "Clean Orphan Packages")"
    echo ""
    echo " q) Quit"
    echo ""
    MAINMENU+=" q"
    read_input_options "$MAINMENU"
    for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
            1)
                custom_repositories
                install_basic_setup
                install_video_cards
                install_git_tor
                CURRENT_STATUS=1
                sumary "Basic setup installation"
                pause_function
                BASICSETUP=1
                ;;
            2)
                if [[ $BASICSETUP -eq 0 ]]; then
                    echo -e "\nWARNING: YOU MUST RUN THE BASIC SETUP FIRST"
                    read_input_text "Are you sure you want to continue?"
                    if [[ $OPTION == n ]]; then continue; fi
                fi
                install_desktop_environment
                install_nm_wicd
                DESKTOPENVIRONMENT=1
                ;;
            3)
                install_accessories_apps
                ACCESSORIES=1
                ;;
            4)
                install_development_apps
                DEVELOPMENT=1
                ;;
            5)
                install_office_apps
                OFFICE=1
                ;;
            6)
                install_system_apps
                SYSTEM=1
                ;;
            7)
                install_graphics_apps
                GRAPHICS=1
                ;;
            8)
                install_internet_apps
                INTERNET=1
                ;;
            9)
                install_audio_apps
                AUDIO=1
                ;;
            10)
                install_video_apps
                VIDEO=1
                ;;
            11)
                install_games
                GAMES=1
                ;;
            12)
                install_lamp
                LAMP=1
                ;;
            13)
                install_fonts
                FONTS=1
                ;;
            14)
                clean_orphan_packages
                CLEANPACKAGES=1
                ;;
            "q")
                finish
                ;;
            *)
                invalid_option
                ;;
        esac
    done
done
#}}}
